#Linear regression for hindfoot length vs. weight
fit1 <- lm(hindfoot_length ~ weight, data = rodent_complete)
summary(fit1)
# Reject null hypothesis that the slope of the linear regression model
# does not differ significantly from zero.
#tests for mean hindfoot lengths of different species
# Evaluate assumptions of ANOVA (homogeneity of variance)
# Bartlett Test of Homogeneity of Variances
bartlett <- bartlett.test(hindfoot_length~species_id, data=surveys_hfoot_id)
bartlett$p.value
# Reject the null that variances of the levels of species id are equal.
# Does not meet assumptions, so non-parametric alternative used
#Kruskal-Wallis rank sum test
kruskal <- kruskal.test(hindfoot_length~as.factor(species_id), data=surveys_hfoot_id)
kruskal$p.value
# Reject null hypothesis that all species have the same average hindfoot lengths.
#non-parametric Pairwise Wilcoxon Rank Sum Tests to determine which species differ from one another.
pairwise.wilcox.test(surveys_hfoot_id$hindfoot_length, as.factor(surveys_hfoot_id$species_id))
# pairs with values <0.05 are significantly different from each other and we reject the null that the group means are the same
#########THE CODE I HAVE COMMENTED OUT HERE IS FOR THE WORK-AROUND
# #Load the packages ggplot2, gsheet, and dpLyr
# library(ggplot2)
# library(gsheet)
# library(dplyr)
# #Store the Google sheets link as the variable url
# #Load the data stored in the variable url using the gsheet2tbl function
# #and store it as the variable plant_data
# url <- 'https://docs.google.com/spreadsheets/d/1Spfd9HXHJjGs2Ibip-mPCdEfpD4tWHvc-AaaYpdMeSM/edit#gid=1807106462'
# plant_data <- gsheet2tbl(url)
# #check data to make sure it looks right
# #all points for seedling height over time
# ggplot(plant_data, aes(x=Day, y=Height, color=Exposure)) +geom_point() +
#   scale_x_continuous(name='Time (days) NK')+scale_y_continuous(name='Height (cm) NK')
#
# #Store the Google sheets link with calculated means and sd's as the variable url2
# #Load the data stored in the variable url2 using the gsheet2tbl function
# #and store it as the variable plant_data_means
# #I created a separate table of means and sd's rather than use summarise() function in step 4 of instructions
# url2 <-'https://docs.google.com/spreadsheets/d/1yP-20kz8LNRoOk0oCsWOEGay2rRmoWM52ar_qSL_2ug/edit#gid=0'
# plant_data_means <- gsheet2tbl(url2)
# #make plot for plant_data_means data using the ggplot command
# ggplot(grouped_plant_data, aes(x=Day, y=Mean, color=Exposure)) +geom_point() +
#   scale_x_continuous(name='Time (days) NK')+scale_y_continuous(name='Height (cm) NK') + stdev(grouped_plant_data$SD)
############## THIS IS THE LAB MANUAL WAY
#load ggplot2, gsheet, and dpLyr
library(ggplot2)
library(gsheet)
library(dplyr)
#store google sheets link as variable url
#load data stored in variable url using gsheet2tbl and store as variable plant_data
url<-"https://docs.google.com/spreadsheets/d/1VSaHgywwUZDsdFUOkWTSOlW50N316VxsXq8W76a5Kss/edit#gid=1807106462"
plant_data <- gsheet2tbl(url)
#Figure 1. all points for seedling height over time
ggplot(plant_data, aes(x=day, y=height, color=exposure))+
geom_point()+
scale_x_continuous(name="Time (Days) NK")+
scale_y_discrete(name="Height (cm) NK")
# Group the plant_data variable by exposure and day using the group_by function and store it as the variable grouped_plant_data
grouped_plant_data <- group_by(plant_data, exposure, day)
# Calculate the mean height of the seedlings at each interval using the summarise function and store it as the variable plant_data_means
#plant_data_means <- summarise(grouped_plant_data,mean=mean(height, na.rm=TRUE))
# Use na.rm=TRUE to ignore NA values in the data
# Make your plot for the plant_data_means data using the ggplot command
#ggplot(plant_data_means, aes(x=day, y=mean, color=exposure))+geom_point()+scale_x_continuous(name='Day MH')+scale_y_discrete(name='Mean Height(cm) MH')
# Remake your table of means so it includes std deviation and store the additional data as the variable plant_data_means
plant_data_means <- summarise(grouped_plant_data, mean = mean(height, na.rm=TRUE), stdev = sd(height, na.rm=TRUE))
# Add the error bars to the plot using geom_errorbar
#ggplot(plant_data_means, aes(x=day, y=mean, color=exposure))+geom_point()+scale_x_continuous(name='Day MH')+scale_y_discrete(name='Mean Height(cm) MH')+ geom_errorbar(aes(ymin=mean+stdev, ymax=mean-stdev))
# Edit the width of the error bars
#ggplot(plant_data_means, aes(x=day, y=mean, color=exposure))+geom_point()+scale_x_continuous(name='Day MH')+scale_y_discrete(name='Mean Height(cm) MH')+ geom_errorbar(aes(ymin=mean+stdev, ymax=mean-stdev, width=0.2))
# Add the regression to your plot using geom_smooth
#Figure 2 mean plant height
ggplot(plant_data_means, aes(x=day, y=mean, color=exposure))+
geom_point()+
scale_x_continuous(name="Time (Days) NK")+
scale_y_continuous(name="Height (cm) NK")+
geom_errorbar(aes(ymin=mean+stdev, ymax=mean-stdev, width=0.2)) +
geom_smooth(method="lm", se = FALSE)
# Subset plant data by exposure and growth time and store as the variables light6days and dark6days
dark6days <- filter(plant_data, exposure=='dark' & day==6)
light6days <- filter(plant_data, exposure=='light' & day==6)
# t test to compare heights of 6 day old seedlings for light and dark conditions
#null hypothesis: there is no different in growth between light and dark conditions
t.test(dark6days$height, light6days$height)
ggplot(plant_data_means, aes(x=day, y=mean, color=exposure))+
geom_point()+
scale_x_continuous(name="Time (Days) NK")+
scale_y_continuous(name="Height (cm) NK")+
labs(fill='NEW LEGEND TITLE')+
geom_errorbar(aes(ymin=mean+stdev, ymax=mean-stdev, width=0.2)) +
geom_smooth(method="lm", se = FALSE)
ggplot(plant_data_means, aes(x=day, y=mean, color=exposure))+
geom_point()+
scale_x_continuous(name="Time (Days) NK")+
scale_y_continuous(name="Height (cm) NK")+
labs(color='NEW LEGEND TITLE')+
geom_errorbar(aes(ymin=mean+stdev, ymax=mean-stdev, width=0.2)) +
geom_smooth(method="lm", se = FALSE)
ggplot(plant_data_means, aes(x=day, y=mean, color=exposure))+
geom_point()+
scale_x_continuous(name="Time (Days) NK")+
scale_y_continuous(name="Height (cm) NK")+
labs(color="Exposure")+
geom_errorbar(aes(ymin=mean+stdev, ymax=mean-stdev, width=0.2)) +
geom_smooth(method="lm", se = FALSE)
citation()
library(ggplot2)
library(tidyverse)
library(AICcmodavg)
require(gridExtra)
Sponges.start <- read.csv("ORIGINAL_Guana_Sponge_data_for_analysis.csv", header=T)
Sponges.original <- Sponges.start[1:557,1:65]
Sponges.long <- Sponges.original %>%
gather(key = "Taxonomic_Group", value = "Count",
Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
Sponges.start <- read.csv("ORIGINAL_Guana_Sponge_data_for_analysis.csv", header=T)
setwd("C:/Users/Nicole/Desktop/Graduate Thesis 3-29-18/Startingfromrawdata")
Sponges.start <- read.csv("ORIGINAL_Guana_Sponge_data_for_analysis.csv", header=T)
Sponges.original <- Sponges.start[1:557,1:65]
Sponges.long <- Sponges.original %>%
gather(key = "Taxonomic_Group", value = "Count",
Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
summary(Sponges.long)
Sponges.long$Taxonomic_Group <- as.factor(Sponges.long$Taxonomic_Group)
temp = which(Sponges.long$Site == "Bigelow-South")
Sponges.long$Site[temp] = "Bigelow"
temp = which(Sponges.long$Site == "Long Point")
Sponges.long$Site[temp] = "Muskmelon"
temp = which(Sponges.long$Site == "Monkey Pt area")
Sponges.long$Site[temp] = "Monkey Pt"
temp = which(Sponges.long$Site == "Pelican")
Sponges.long$Site[temp] = "Pelican Ghut"
temp = which(Sponges.long$Site == "White Bay-alt")
Sponges.long$Site[temp] = "White Bay"
temp = which(Sponges.long$Site == "White Bay E")
Sponges.long$Site[temp] = "White Bay"
Sponges.start <- read.csv("ORIGINAL_Guana_Sponge_data_for_analysis.csv", header=T)
Sponges.original <- Sponges.start[1:557,1:65]
Sponges.long <- Sponges.original %>%
gather(key = "Taxonomic_Group", value = "Count",
Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
summary(Sponges.long)
Sponges.long$Taxonomic_Group <- as.factor(Sponges.long$Taxonomic_Group)
temp = which(Sponges.long$Site == "Long Point")
Sponges.long$Site[temp] = "Muskmelon"
temp = which(Sponges.long$Site == "Pelican")
Sponges.long$Site[temp] = "Pelican Ghut"
Sponges.long.means <- Sponges.long %>% group_by(Year, Site) %>% summarize(Total_Mean_Count = mean(Count))
Sponges.long.means <- Sponges.long.means %>% filter(!is.na(Total_Mean_Count))
Sponges.long.nozero <- Sponges.long %>% filter(Sponges.long$Count != 0)
Corals.original <- read.csv(file = "benthicmeans_clean_all.csv", header = T)
Corals.long <- subset(Corals.original, select=c(Site:po.massive)) %>%
gather(key = "Taxonomic_Group", value = "Mean_Percent_Cover",
acpa:po.massive)
summary(Corals.long)
Corals.long$Taxonomic_Group <- as.factor(Corals.long$Taxonomic_Group)
Corals.long$Mean_Percent_Cover[which(Corals.long$Mean_Percent_Cover < 0)] <- 0
Corals.long.means <- Corals.long %>% group_by(Year, Site) %>% summarize(Total_Mean_Cover = mean(Mean_Percent_Cover))
Corals.long.means <- Corals.long.means %>% filter(!is.na(Total_Mean_Cover))
str(Corals.long)
summary(Corals.long)
levels(Corals.long$Site)
levels(Corals.long$Year)
unique(Corals.long$Year)
Corals.long$Year[which(Corals.long$Site == "Bigelow"),]
which(Corals.long$Site == "Bigelow")
Corals.long[which(Corals.long$Site == "Bigelow"),]
big<-Corals.long[which(Corals.long$Site == "Bigelow"),]
unique(big$Year)
big<-Corals.long[which(Corals.long$Site == "Guana Head"),]
unique(big$Year)
big<-Corals.long[which(Corals.long$Site == "Monkey Point"),]
unique(big$Year)
unique(big$Year)
big<-Corals.long[which(Corals.long$Site == "Grand Ghut"),]
unique(big$Year)
big<-Corals.long[which(Corals.long$Site == "Crab Cove"),]
unique(big$Year)
big<-Corals.long[which(Corals.long$Site == "Muskmelon"),]
unique(big$Year)
big<-Corals.long[which(Corals.long$Site == "White Bay"),]
unique(big$Year)
big<-Corals.long[which(Corals.long$Site == "Pelican Ghut"),]
unique(big$Year)
big<-Corals.long[which(Corals.long$Site == "Monkey Pt"),]
unique(big$Year)
Sponges.long
big<-Sponges.long[which(Sponges.long$Site == "Monkey Pt"),]
unique(big$Year)
big<-Sponges.long[which(Sponges.long$Site == "Guana Head"),]
unique(big$Year)
big<-Sponges.long[which(Sponges.long$Site == "Bigelow"),]
unique(big$Year)
big<-Sponges.long[which(Sponges.long$Site == "Grand Ghut"),]
unique(big$Year)
big<-Sponges.long[which(Sponges.long$Site == "Crab Cove"),]
unique(big$Year)
big<-Sponges.long[which(Sponges.long$Site == "Pelican Ghut"),]
unique(big$Year)
big<-Sponges.long[which(Sponges.long$Site == "Muskmelon"),]
unique(big$Year)
big<-Sponges.long[which(Sponges.long$Site == "White Bay"),]
unique(big$Year)
Sponges.start <- read.csv("ORIGINAL_Guana_Sponge_data_for_analysis.csv", header=T)
View(Sponges.start)
Sponges.original <- Sponges.start[1:557,1:65]
Sponges.long <- Sponges.original %>%
gather(key = "Taxonomic_Group", value = "Count",
Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
summary(Sponges.long)
library(ggplot2)
library(tidyverse)
library(AICcmodavg)
require(gridExtra)
Sponges.long <- Sponges.original %>%
gather(key = "Taxonomic_Group", value = "Count",
Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
summary(Sponges.long)
Sponges.long$Taxonomic_Group <- as.factor(Sponges.long$Taxonomic_Group)
temp = which(Sponges.long$Site == "Long Point")
Sponges.long$Site[temp] = "Muskmelon"
temp = which(Sponges.long$Site == "Pelican")
Sponges.long$Site[temp] = "Pelican Ghut"
Sponges.long.means <- Sponges.long %>% group_by(Year, Site) %>% summarize(Total_Mean_Count = mean(Count))
Sponges.long.means <- Sponges.long.means %>% filter(!is.na(Total_Mean_Count))
Sponges.long.nozero <- Sponges.long %>% filter(Sponges.long$Count != 0)
Corals.original <- read.csv(file = "benthicmeans_clean_all.csv", header = T)
Corals.long <- subset(Corals.original, select=c(Site:po.massive)) %>%
gather(key = "Taxonomic_Group", value = "Mean_Percent_Cover",
acpa:po.massive)
summary(Corals.long)
Corals.long$Taxonomic_Group <- as.factor(Corals.long$Taxonomic_Group)
Corals.long$Mean_Percent_Cover[which(Corals.long$Mean_Percent_Cover < 0)] <- 0
Corals.long.means <- Corals.long %>% group_by(Year, Site) %>% summarize(Total_Mean_Cover = mean(Mean_Percent_Cover))
Corals.long.means <- Corals.long.means %>% filter(!is.na(Total_Mean_Cover))
View(Corals.long)
unique(Corals.long$Taxonomic_Group)
unique.corals <- unique(Corals.long$Taxonomic_Group)
View(Corals.original)
View(Corals.long)
unique.corals <- unique(Corals.long$Taxonomic_Group)
unique.corals <- unique(Corals.long$Taxonomic_Group)
unique(Corals.long$Taxonomic_Group)
library(tidyverse)
fish_codes <- read.csv("fish species codes 2018.csv", header=T)
setwd("C:/Users/Nicole/Desktop/Graduate Thesis 3-29-18/Data Analysis")
fish_codes <- read.csv("fish species codes 2018.csv", header=T)
fish_list <- read.xls("Fish species list.xlsx", header=T)
fish_raw <- read.csv("raw fish data nicole 2018.csv", header=T)
library(gdata)
require(gdata)
source('C:/Users/Nicole/Desktop/Graduate Thesis 3-29-18/Data Analysis/Benthic_Code_Keefner_MS.R', echo=TRUE)
install.packages("gdata")
source('C:/Users/Nicole/Desktop/Graduate Thesis 3-29-18/Data Analysis/Benthic_Code_Keefner_MS.R', echo=TRUE)
library(gdata)
fish_list <- read.xls("Fish species list.xlsx", header=T)
read.xls?
source('C:/Users/Nicole/Desktop/Graduate Thesis 3-29-18/Data Analysis/Benthic_Code_Keefner_MS.R', echo=TRUE)
?read.xls
fish_list <- read.table("Fish species list.xlsx", header=T)
fish_list <- read.csv("Fish species list.csv", header=T)
View(fish_raw)
View(fish_list)
View(fish_codes)
fish_raw_long <- fish_raw %>% gather(key = "KEY", value = "Count", popaa:kysea)
library(tidyverse)
fish_raw_long <- fish_raw %>% gather(key = "KEY", value = "Count", popaa:kysea)
library(magrittr)
fish_raw_long <- fish_raw %>% gather(key = "KEY", value = "Count", popaa:kysea)
library(tidyr)
library(dplyr)
library(magrittr)
library(tidyverse)
library(tidyr)
library(dplyr)
fish_raw_long <- fish_raw %>% gather(key = "KEY", value = "Count", popaa:kysea)
View(fish_raw_long)
summary(fish_raw_long)
which(Count=="0")
which(fish_raw_long$Count=="0")
str(fish_raw_long)
KEY <- as.character(fish_raw_long$KEY)
fish_raw_long_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)),
"Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
View(fish_raw_long_split)
?cbind
cbind(fish_raw_long,fish_raw_long_split)
test<-cbind(fish_raw_long,fish_raw_long_split)
View(test)
summary(test$Species_Code)
summary(test$Age_Class)
View(fish_list)
View(fish_codes)
View(fish_raw_long_split)
## Import fish datasets (see "Fish Metadata.docx" for more information)
fish_codes <- read.csv("fish species codes 2018.csv", header=T)
fish_list <- read.csv("Fish species list.csv", header=T)
fish_raw <- read.csv("raw fish data nicole 2018.csv", header=T)
# Put fish_raw into long form (i.e. so species codes are in a single column rather than having one column for each species code)
# key = "title of new column", value = "numbers being moved around because of the key",
# ":" specifies which columns should be included in key
fish_raw_long <- fish_raw %>% gather(key = "KEY", value = "Count", popaa:kysea)
# Split new KEY column into species_code and age_class columns
KEY <- as.character(fish_raw_long$KEY)
fish_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)),
"Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
# Combine long-form dataset with the split columns dataframe
fish_raw_long_split<-cbind(fish_raw_long,fish_split)
View(fish_raw_long_split)
colnames(fish_codes)[colnames(fish_codes)=="new_code"] <- "KEY"
str(fish_codes)
colnames(fish_codes)[colnames(fish_codes)=="ï..new_code"] <- "KEY"
fish_raw_long_split_codes <- merge(fish_raw_long_split, fish_codes, by="KEY")
View(fish_raw_long_split_codes)
colnames(fish_list)[colnames(fish_list)=="f_code"] <- "KEY"
str(fish_list)
fish_raw_long_split_codes_list <- merge(fish_raw_long_split, fish_list, by="KEY")
View(fish_raw_long_split_codes_list)
fish_raw_long_split_codes <- merge(fish_raw_long_split, fish_codes, by="KEY", all = T)
colnames(fish_list)[colnames(fish_list)=="f_code"] <- "KEY"
fish_raw_long_split_codes_list <- merge(fish_raw_long_split, fish_list, by="KEY")
fish_raw_long_split_codes_list <- merge(fish_raw_long_split, fish_list, by="KEY", all = T)
View(fish_raw_long_split_codes_list)
fish_raw_long_split_codes_list
str(fish_raw_long_split_codes_list)
ls(fish_raw_long_split_codes_list$site)
summary(fish_raw_long_split_codes_list$site)
newdata <- fish_raw_long_split_codes_list[which(fish_raw_long_split_codes_list$depth == '30'
& fish_raw_long_split_codes_list$survey == 'main'), ]
View(newdata)
str(fish_raw_long_split_codes_list$Count)
summary(fish_raw_long_split_codes_list$Count)
newdata <- fish_raw_long_split_codes_list[which(fish_raw_long_split_codes_list$depth == '30'
& fish_raw_long_split_codes_list$survey == 'main') & fish_raw_long_split_codes_list$Count <> NA, ]
newdata <- fish_raw_long_split_codes_list[which(fish_raw_long_split_codes_list$depth == '30'
& fish_raw_long_split_codes_list$survey == 'main') & fish_raw_long_split_codes_list$Count != NA, ]
newdata <- fish_raw_long_split_codes_list[which(fish_raw_long_split_codes_list$depth == '30'
& fish_raw_long_split_codes_list$survey == 'main'), ]
newdata <- fish_raw_long_split_codes_list[which(fish_raw_long_split_codes_list$depth == '30'
& fish_raw_long_split_codes_list$survey == 'main'), ]
newdata1 <- newdata[!is.na(newdata$Count), ]
View(newdata1)
summary(newdata1$Count)
str(newdata1$Count)
summary(newdata$Count)
### Nicole Keefner
### Master's Thesis
## Set Working Directory
## Load packages
library(tidyverse)
library(tidyr)
library(dplyr)
## Import fish datasets (see "Fish Metadata.docx" for more information)
fish_codes <- read.csv("fish species codes 2018.csv", header = T)
fish_list <- read.csv("Fish species list.csv", header = T)
fish_raw <- read.csv("raw fish data nicole 2018.csv", header = T)
# Put fish_raw into long form (i.e. so species codes are in a single column rather than having one column for each species code)
# key = "title of new column", value = "numbers being moved around because of the key",
# ":" specifies which columns should be included in key
fish_raw_long <- fish_raw %>% gather(key = "KEY", value = "Count", popaa:kysea)
# Split new KEY column into species_code and age_class columns
KEY <- as.character(fish_raw_long$KEY)
fish_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)), "Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
# Combine long-form dataset with the split columns dataframe
fish_raw_long_split <- cbind(fish_raw_long, fish_split)
# Rename column in fish_codes dataframe to use as a key to merge this information with the raw data
colnames(fish_codes)[colnames(fish_codes) == "ï..new_code"] <- "KEY"
fish_raw_long_split_codes <- merge(fish_raw_long_split, fish_codes, by = "KEY", all = T)
# Rename column in fish_list dataframe to use as a key to merge this information with the raw data + fish code info
colnames(fish_list)[colnames(fish_list) == "f_code"] <- "KEY"
fish_raw_long_split_codes_list <- merge(fish_raw_long_split, fish_list, by = "KEY", all = T)
## According to Dr. Forrester, I should only use observations where survey==main and depth==30 (feet)
fish_raw_30ft_main <- fish_raw_long_split_codes_list[which(fish_raw_long_split_codes_list$depth == '30'
& fish_raw_long_split_codes_list$survey == 'main'), ]
# Remove observations where count is NA
fish_raw_30ft_main <- fish_raw_30ft_main[!is.na(fish_raw_30ft_main$Count), ]
## Select for 8 Sites around Guana Island:
## Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head
summary(fish_raw_30ft_main$site)
summary(fish_raw_30ft_main$site)
str(fish_raw_30ft_main$site)
View(fish_raw_30ft_main)
summary(fish_raw_30ft_main$Dietary.group)
summary(fish_raw_30ft_main)
select(fish_raw_30ft_main, ï..notes, visibility, duration, year, month, day, site, transect, fixed_transect, Count, Species_Code, Age_Class, Family, Family2, Commonname, scientific name, Trophic.Level, Max.body.size, Dietary.group)
select(fish_raw_30ft_main, ï..notes, visibility, duration, year, month, day, site, transect, fixed_transect, Count, Species_Code, Age_Class, Family, Family2, Commonname, scientific.name, Trophic.Level, Max.body.size, Dietary.group)
library(dplyr)
select(fish_raw_30ft_main, ï..notes, visibility, duration, year, month, day, site, transect, fixed_transect, Count, Species_Code, Age_Class, Family, Family2, Commonname, scientific.name, Trophic.Level, Max.body.size, Dietary.group)
?select
??select
attach(fish_raw_30ft_main)
attach(fish_raw_30ft_main)
subset <- fish_raw_30ft_main[,c(ï..notes, visibility, duration, year, month, day, site, transect, fixed_transect, Count, Species_Code, Age_Class, Family, Family2, Commonname, scientific.name, Trophic.Level, Max.body.size, Dietary.group)]
subset <- fish_raw_30ft_main[,c("ï..notes", "visibility", "duration", "year", "month", "day", "site", "transect",
"fixed_transect", "Count", "Species_Code", "Age_Class", "Family", "Family2",
"Commonname", "scientific.name", "Trophic.Level", "Max.body.size", "Dietary.group")]
View(subset)
summary(subset$site) # There are 48 distinct sites.
detach(fish_raw_30ft_main)
detach(fish_raw_30ft_main)
subset2 <- subset[which(subset$site == 'iguana' | subset$site == 'pelican   ' | subset$site == 'pelican' |
subset$site == 'white' | subset$site == 'bigelow' | subset$site == 'Bigelow south' |
subset$site == 'grand' | subset$site == 'muskN' | subset$site == 'monkey' | subset$site == 'crab'), ]
View(subset2)
summary(subset2$site) # There are 48 distinct sites.
ed_exp5 <- select(filter(fish_raw_30ft_main, site == 'iguana' | site == 'pelican   ' | site == 'pelican' |
site == 'white' | site == 'bigelow' | site == 'Bigelow south' |
site == 'grand' | site == 'muskN' | site == 'monkey' | site == 'crab'),c("ï..notes", "visibility", "duration", "year", "month", "day", "site", "transect",
"fixed_transect", "Count", "Species_Code", "Age_Class", "Family", "Family2",
"Commonname", "scientific.name", "Trophic.Level", "Max.body.size", "Dietary.group"))
library(dplyr)
ed_exp5 <- select(filter(fish_raw_30ft_main, site == 'iguana' | site == 'pelican   ' | site == 'pelican' |
site == 'white' | site == 'bigelow' | site == 'Bigelow south' |
site == 'grand' | site == 'muskN' | site == 'monkey' | site == 'crab'),c("ï..notes", "visibility", "duration", "year", "month", "day", "site", "transect",
"fixed_transect", "Count", "Species_Code", "Age_Class", "Family", "Family2",
"Commonname", "scientific.name", "Trophic.Level", "Max.body.size", "Dietary.group"))
ed_exp5 <- select(filter(fish_raw_30ft_main, site == 'iguana' | site == 'pelican   ' | site == 'pelican' |
site == 'white' | site == 'bigelow' | site == 'Bigelow south' |
site == 'grand' | site == 'muskN' | site == 'monkey' | site == 'crab'),c("ï..notes", "visibility", "duration", "year", "month", "day", "site", "transect",
"fixed_transect", "Count", "Species_Code", "Age_Class", "Family", "Family2",
"Commonname", "scientific.name", "Trophic.Level", "Max.body.size", "Dietary.group"))
ed_exp5 <- select(filter(subset, site == 'iguana' | site == 'pelican   ' | site == 'pelican' |
site == 'white' | site == 'bigelow' | site == 'Bigelow south' |
site == 'grand' | site == 'muskN' | site == 'monkey' | site == 'crab'))
ed_exp5 <- filter(subset, site == 'iguana' | site == 'pelican   ' | site == 'pelican' |
site == 'white' | site == 'bigelow' | site == 'Bigelow south' |
site == 'grand' | site == 'muskN' | site == 'monkey' | site == 'crab')
guess <- filter(subset, subset$site == 'iguana' | subset$site == 'pelican   ' | subset$site == 'pelican' |
subset$site == 'white' | subset$site == 'bigelow' | subset$site == 'Bigelow south' |
subset$site == 'grand' | subset$site == 'muskN' | subset$site == 'monkey' | subset$site == 'crab')
guess <- select(filter(subset, subset$site == 'iguana' | subset$site == 'pelican   ' | subset$site == 'pelican' |
subset$site == 'white' | subset$site == 'bigelow' | subset$site == 'Bigelow south' |
subset$site == 'grand' | subset$site == 'muskN' | subset$site == 'monkey' | subset$site == 'crab'), )
subset <- fish_raw_30ft_main[,c("ï..notes", "visibility", "duration", "year", "month", "day", "site", "transect",
"fixed_transect", "Count", "Species_Code", "Age_Class", "Family", "Family2",
"Commonname", "scientific.name", "Trophic.Level", "Max.body.size", "Dietary.group")]
subset2 <- subset[which(subset$site == 'iguana' | subset$site == 'pelican   ' | subset$site == 'pelican' |
subset$site == 'white' | subset$site == 'bigelow' | subset$site == 'Bigelow south' |
subset$site == 'grand' | subset$site == 'muskN' | subset$site == 'monkey' | subset$site == 'crab'), ]
str(subset)
sUMMARY(subset)
summary(subset)
source('C:/Users/Nicole/Desktop/Graduate Thesis 3-29-18/Data Analysis/Benthic_Code_Keefner_MS.R', echo=TRUE)
test <- select(filter(fish_raw_30ft_main, site == 'iguana' | site == 'pelican   ' | site == 'pelican' |
site == 'white' | site == 'bigelow' | site == 'Bigelow south' |
site == 'grand' | site == 'muskN' | site == 'monkey' | site == 'crab'),c("ï..notes", "visibility", "duration", "year", "month", "day", "site", "transect",
"fixed_transect", "Count", "Species_Code", "Age_Class", "Family", "Family2",
"Commonname", "scientific.name", "Trophic.Level", "Max.body.size", "Dietary.group"))
library(dplyr)
### Nicole Keefner
### Master's Thesis
## Set Working Directory
## Load packages
library(tidyverse)
library(tidyr)
library(dplyr)
## Import fish datasets (see "Fish Metadata.docx" for more information)
fish_codes <- read.csv("fish species codes 2018.csv", header = T)
fish_list <- read.csv("Fish species list.csv", header = T)
fish_raw <- read.csv("raw fish data nicole 2018.csv", header = T)
# Put fish_raw into long form (i.e. so species codes are in a single column rather than having one column for each species code)
# key = "title of new column", value = "numbers being moved around because of the key",
# ":" specifies which columns should be included in key
fish_raw_long <- fish_raw %>% gather(key = "KEY", value = "Count", popaa:kysea)
# Split new KEY column into species_code and age_class columns
KEY <- as.character(fish_raw_long$KEY)
fish_split <- data.frame("Species_Code" = substr(KEY, 1, (nchar(KEY)-1)), "Age_Class" = substr(KEY, nchar(KEY), nchar(KEY)))
# Combine long-form dataset with the split columns dataframe
fish_raw_long_split <- cbind(fish_raw_long, fish_split)
# Rename column in fish_codes dataframe to use as a key to merge this information with the raw data
colnames(fish_codes)[colnames(fish_codes) == "ï..new_code"] <- "KEY"
fish_raw_long_split_codes <- merge(fish_raw_long_split, fish_codes, by = "KEY", all = T)
# Rename column in fish_list dataframe to use as a key to merge this information with the raw data + fish code info
colnames(fish_list)[colnames(fish_list) == "f_code"] <- "KEY"
fish_raw_long_split_codes_list <- merge(fish_raw_long_split, fish_list, by = "KEY", all = T)
## According to Dr. Forrester, I should only use observations where survey==main and depth==30 (feet)
fish_raw_30ft_main <- fish_raw_long_split_codes_list[which(fish_raw_long_split_codes_list$depth == '30'
& fish_raw_long_split_codes_list$survey == 'main'), ]
# Remove observations where count is NA
fish_raw_30ft_main <- fish_raw_30ft_main[!is.na(fish_raw_30ft_main$Count), ]
## Select for 8 Sites around Guana Island:
## Pelican Ghut, Grand Ghut, Crab Cove, Muskmelon, Bigelow, White Bay, Monkey Point, and Guana Head
summary(fish_raw_30ft_main) # There are 48 distinct sites.
# Keep only the columns that I think might be relevant
subset <- fish_raw_30ft_main[,c("ï..notes", "visibility", "duration", "year", "month", "day", "site", "transect",
"fixed_transect", "Count", "Species_Code", "Age_Class", "Family", "Family2",
"Commonname", "scientific.name", "Trophic.Level", "Max.body.size", "Dietary.group")]
summary(fish_raw_30ft_main$site) # There are 48 distinct sites.
View(fish_codes)
View(fish_codes)
setwd("C:/Users/Nicole/Desktop/Graduate Thesis 3-29-18/Data Analysis")
sponge_raw <- read.csv("Guana_Sponge_data_for_analysis.csv", header=T)
View(sponge_raw)
sponge_raw <- sponge_raw[1:557,1:65]
sponge_raw_long <- sponge_raw %>%
gather(key = "Taxonomic_Group", value = "Count", Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
library(tidyr)
library(dplyr)
sponge_raw <- read.csv("Guana_Sponge_data_for_analysis.csv", header=T)
sponge_raw <- sponge_raw[1:557,1:65]
sponge_raw_long <- sponge_raw %>%
gather(key = "Taxonomic_Group", value = "Count", Agelas.clathrodes..Agelas.citrina.or.Clathria.faviformis:Black..spiny..purple.exudate.but.not.slimy)
summary(sponge_raw_long)
sponge_raw_long$Taxonomic_Group <- as.factor(sponge_raw_long$Taxonomic_Group)
summary(sponge_raw_long)
summary(sponge_raw_long$Site)
temp = which(sponge_raw_long$Site == "Long Point")
sponge_raw_long$Site[temp] = "Muskmelon"
temp = which(sponge_raw_long$Site == "Pelican")
sponge_raw_long$Site[temp] = "Pelican Ghut"
View(sponge_raw_long)
summary(sponge_raw_long$Site)
